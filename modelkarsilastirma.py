# -*- coding: utf-8 -*-
"""modelkarsilastirma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IKFX7gZheGEvhctXD_ADPHYj0ayZeAOu
"""

# Gerekli kütüphaneleri içe aktarma
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns

# Veri setini yükleyin
data = pd.read_csv("heart_disease_data.csv")  # Veri setinin dosya yolunu belirtme

# Bağımsız değişkenleri (X) ve hedef değişkeni (y) ayırma
X = data.drop("target", axis=1)
y = data["target"]

# Eğitim ve test kümelerini oluşturma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest sınıflandırıcısını oluşturma ve eğitme
rf = RandomForestClassifier()
rf.fit(X_train, y_train)

# Test verilerini kullanarak tahmin yapma
y_pred = rf.predict(X_test)

# Modelin performansını değerlendirme
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Sonuçları yazdırma
print("RANDOM FOREST")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)




# Confusion matrisini çiz
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Reds")
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.show()

# Gerekli kütüphaneleri içe aktarma
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns

# Veri setini yükleyin
data = pd.read_csv("heart_disease_data.csv")  # Veri setinin dosya yolunu belirtme

# Bağımsız değişkenleri (X) ve hedef değişkeni (y) ayırma
X = data.drop("target", axis=1)
y = data["target"]

# Eğitim ve test kümelerini oluşturma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Support Vector Machine sınıflandırıcısını oluşturun ve eğitme
svm = SVC()
svm.fit(X_train, y_train)

# Test verilerini kullanarak tahmin yapma
y_pred = svm.predict(X_test)

# Modelin performansını değerlendirme
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Sonuçları yazdırma
print("SUPPORT VECTOR MACHINE(SVM)")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)



# Confusion matrisini çiz
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Blues")
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.show()

# Gerekli kütüphaneleri içe aktarma
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns

# Veri setini yükleyin
data = pd.read_csv("heart_disease_data.csv")  # Veri setinin dosya yolunu belirtme

# Bağımsız değişkenleri (X) ve hedef değişkeni (y) ayırma
X = data.drop("target", axis=1)
y = data["target"]

# Eğitim ve test kümelerini oluşturma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Decision Tree sınıflandırıcısını oluşturma ve eğitme
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)

# Test verilerini kullanarak tahmin yapma
y_pred = dt.predict(X_test)

# Modelin performansını değerlendirme
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Sonuçları yazdırma
print("DECISION TREE")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)




# Confusion matrisini çiz
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Reds")
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.show()

# Gerekli kütüphaneleri içe aktarın
import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
# Veri setini yükleyin
data = pd.read_csv("heart_disease_data.csv")  # Veri setinin dosya yolunu belirtin

# Bağımsız değişkenleri (X) ve hedef değişkeni (y) ayırın
X = data.drop("target", axis=1)
y = data["target"]

# Eğitim ve test kümelerini oluşturma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Naive Bayes sınıflandırıcısını oluşturun ve eğitme
nb = GaussianNB()
nb.fit(X_train, y_train)

# Test verilerini kullanarak tahmin yapma
y_pred = nb.predict(X_test)

# Modelin performansını değerlendirme
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Sonuçları yazdırma
print("NAIVE BAYESS")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)




# Confusion matrisini çiz
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Blues")
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.show()

# Gerekli kütüphaneleri içe aktarma
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns


# Veri setini yükleyin
data = pd.read_csv("heart_disease_data.csv")  # Veri setinin dosya yolunu belirtme

# Bağımsız değişkenleri (X) ve hedef değişkeni (y) ayırma
X = data.drop("target", axis=1)
y = data["target"]

# Eğitim ve test kümelerini oluşturun
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# K-En Yakın Komşu sınıflandırıcısını oluşturma ve eğitme
knn = KNeighborsClassifier(n_neighbors=2)  # K değerini belirtin (burada 5 olarak varsayılan olarak kullanıldı)
knn.fit(X_train, y_train)

# Test verilerini kullanarak tahmin yapma
y_pred = knn.predict(X_test)

# Modelin performansını değerlendirme
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Sonuçları yazdırma
print("KNN")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)



# Confusion matrisini çiz
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Greens")
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Veri setini yükle
data = pd.read_csv("heart_disease_data.csv")

# Bağımsız değişkenler ve hedef değişken olarak ayır
X = data.drop('target', axis=1)
y = data['target']

# Eğitim ve test veri setlerini ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lojistik regresyon modelini oluştur
model = LogisticRegression(max_iter=1000)

# Modeli eğit
model.fit(X_train, y_train)

# Test veri seti üzerinde tahmin yap
y_pred = model.predict(X_test)

# Sınıflandırma metriklerini hesapla
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)



# Sonuçları yazdır
print("LOGISTIC REGRESSION")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Veri setini yükle
data = pd.read_csv("heart_disease_data.csv")

# Bağımsız değişkenler ve hedef değişken olarak ayır
X = data.drop('target', axis=1)
y = data['target']

# Eğitim ve test veri setlerini ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lojistik regresyon modelini oluştur
model = LogisticRegression(max_iter=1000)

# Modeli eğit
model.fit(X_train, y_train)

# Eğitim veri seti üzerinde tahmin yap
y_train_pred = model.predict(X_train)
train_accuracy = accuracy_score(y_train, y_train_pred)
train_precision = precision_score(y_train, y_train_pred)
train_recall = recall_score(y_train, y_train_pred)
train_f1 = f1_score(y_train, y_train_pred)

# Test veri seti üzerinde tahmin yap
y_test_pred = model.predict(X_test)
test_accuracy = accuracy_score(y_test, y_test_pred)
test_precision = precision_score(y_test, y_test_pred)
test_recall = recall_score(y_test, y_test_pred)
test_f1 = f1_score(y_test, y_test_pred)

# Confusion matrisini çiz
cm = confusion_matrix(y_test, y_test_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Blues")
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.show()

# Sonuçları yazdır
print("Eğitim Doğruluğu:", train_accuracy)
print("Eğitim Kesinlik:", train_precision)
print("Eğitim Duyarlılık:", train_recall)
print("Eğitim F1 Skoru:", train_f1)
print("Test Doğruluğu:", test_accuracy)
print("Test Kesinlik:", test_precision)
print("Test Duyarlılık:", test_recall)
print("Test F1 Skoru:", test_f1)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# Veri setini yükle
data = pd.read_csv("heart_disease_data.csv")

# Bağımsız değişkenler ve hedef değişken olarak ayır
X = data.drop('target', axis=1)
y = data['target']

# Eğitim ve test veri setlerini ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lojistik regresyon modelini oluştur
model = LogisticRegression()

# Modeli eğit
model.fit(X_train, y_train)

# Eğitim veri seti üzerinde tahmin yap
y_train_pred = model.predict(X_train)
train_accuracy = accuracy_score(y_train, y_train_pred)
train_precision = precision_score(y_train, y_train_pred)
train_recall = recall_score(y_train, y_train_pred)
train_f1 = f1_score(y_train, y_train_pred)

# Test veri seti üzerinde tahmin yap
y_test_pred = model.predict(X_test)
test_accuracy = accuracy_score(y_test, y_test_pred)
test_precision = precision_score(y_test, y_test_pred)
test_recall = recall_score(y_test, y_test_pred)
test_f1 = f1_score(y_test, y_test_pred)

# Confusion matrisini çiz
cm = confusion_matrix(y_test, y_test_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt=".0f", cmap="Blues")
plt.xlabel('Tahmin Edilen Değerler')
plt.ylabel('Gerçek Değerler')
plt.show()

# Veri setindeki parametrelere göre grafik çiz
sns.pairplot(data, vars=['age', 'chol', 'thalach', 'trestbps'], hue='target', diag_kind='hist')
plt.show()

# Sonuçları yazdır
print("Eğitim Doğruluğu:", train_accuracy)
print("Eğitim Kesinlik:", train_precision)
print("Eğitim Duyarlılık:", train_recall)
print("Eğitim F1 Skoru:", train_f1)
print("Test Doğruluğu:", test_accuracy)
print("Test Kesinlik:", test_precision)
print("Test Duyarlılık:", test_recall)
print("Test F1 Skoru:", test_f1)